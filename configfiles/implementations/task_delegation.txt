description "Executing using memory"


# ------------------------------------------------
# The amount of the behavior states the agent has
# ------------------------------------------------
nbStates 4                          # The wander behavior is implemented in a single state
1 agent.behavior.tast_delegation.behavior.Wander       # First behavior
nbArgs 0                            # Constructor with no args
2 agent.behavior.tast_delegation.behavior.Navigate     # Second behavior
nbArgs 0                            # // (no arguments)
3 agent.behavior.tast_delegation.behavior.Operate      # Third behavior
nbArgs 0                            # // (no arguments)
4 agent.behavior.tast_delegation.behavior.Request      # Fourth behavior
nbArgs 0                            # // (no arguments)


# ---------------------------------------------------------------
# The amount of behavior changes for the agent
#  (only necessary when more than 1 agent behavior is specified)
# ---------------------------------------------------------------
nbChanges 8                                             # This implementation does not have any behavior changes
                                                        # (no different agent behavior state to change to)
                                                        # First change, from behavior with ID 1 to behavior with ID 2
agent.behavior.tast_delegation.change.FromWanderToNavigate
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 1                                                # ID of starting behavior
target 2                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromWanderToOperate
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 1                                                # ID of starting behavior
target 3                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromOperateToNavigate
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 3                                                # ID of starting behavior
target 2                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromOperateToWander
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 3                                                # ID of starting behavior
target 1                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromNavigateToWander
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 2                                                # ID of starting behavior
target 1                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromNavigateToOperate
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 2                                                # ID of starting behavior
target 3                                                # ID of resulting behavior

agent.behavior.tast_delegation.change.FromNavigateToRequest
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 2                                                # ID of starting behavior
target 4

agent.behavior.tast_delegation.change.FromRequestToNavigate
nbArgs 0                                                # The constructor of ConditionOne takes 0 args
priority 0                                              # Higher value −> higher priority (in case of multiple satisfied change conditions from current behavior state)
source 4                                                # ID of starting behavior
target 2

# ----------------
# Further comments
# ----------------

#  Each agent has the same implementation, e.g. all agents work with a single Wander behavior state
#    when you choose this implementation file.

#  Since the wander behavior is quite simple, there is no need to split up the implementation in multiple behaviors.
#    For this implementation, a single state suffices to implement the wander behavior.

#  In case of more complex implementations, it becomes more desirable to split the behavior up in different states
#    so that the complexity becomes easier to manage.
